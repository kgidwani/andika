name: Build and Release Electron App

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  # App configuration
  APP_NAME: "Andika"


jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
          - os: macos-14
            platform: darwin
            arch: arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci


      - name: Build Electron app
        run: npm run make -- --arch=${{ matrix.arch }}
        env:
          # Target architecture
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_target_platform: ${{ matrix.platform }}
          npm_config_cache: /tmp/.npm
          npm_config_build_from_source: true

      - name: List build outputs
        run: |
          echo "Build outputs:"
          find out -type f -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.zip" | head -20

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            out/**/*.exe
            out/**/*.dmg
            out/**/*.deb
            out/**/*.rpm
            out/**/*.AppImage
            out/**/*.zip
          retention-days: 7

  create-release:
    needs: build
    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f | head -20

      - name: Get version
        id: version
        run: |
          echo "version=1.0" >> $GITHUB_OUTPUT

      - name: Upload Release Assets
        run: |
          # Function to upload file
          upload_file() {
            local file="$1"
            local name="$2"
            echo "Uploading $name..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$name"
          }
          
          # Upload Windows x64 artifacts
          for file in artifacts/win32-x64-build/out/make/**/*.exe; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-windows-x64.exe"
              break
            fi
          done
                    
          # Upload macOS ARM64 artifacts
          for file in artifacts/darwin-arm64-build/out/make/**/*.dmg; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-macos-arm64.dmg"
              break
            fi
          done

  notify:
    needs: [build, create-release]
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Notify on success
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ Release created successfully!"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/latest"

      - name: Notify on failure
        if: needs.build.result == 'failure' || needs.create-release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          echo "Check the workflow logs for details."