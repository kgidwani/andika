name: Build and Release Electron App

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  # App configuration
  APP_NAME: "MyElectronApp"
  
  # Code signing environment variables
  # For Windows
  # WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
  
  # For macOS
  # APPLE_ID: ${{ secrets.APPLE_ID }}
  # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
  # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: x64
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: arm64
          # Windows builds
          - os: windows-latest
            platform: win32
            arch: x64
          # - os: windows-latest
          #   platform: win32
          #   arch: arm64
          # macOS builds
          # - os: macos-latest
          #   platform: darwin
          #   arch: x64
          - os: macos-14 # Use macOS 14 for native ARM64 builds
            platform: darwin
            arch: arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci


      # Windows-specific setup
      # - name: Setup Windows certificate
      #   if: matrix.platform == 'win32'
      #   run: |
      #     echo "${{ secrets.WINDOWS_CERT_BASE64 }}" | base64 -d > certificate.p12
      #   shell: bash

      # macOS-specific setup
      # - name: Setup macOS certificates
      #   if: matrix.platform == 'darwin'
      #   run: |
      #     echo "${{ secrets.MACOS_CERT_BASE64 }}" | base64 -d > certificate.p12
      #     security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
      #     security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERT_PASSWORD }}" -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

      # ARM64 cross-compilation setup for Linux
      - name: Setup ARM64 cross-compilation
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
          echo "LINK=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      # Linux-specific setup
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            # ARM64 dependencies
            sudo apt-get install -y libnss3-dev:arm64 libatk-bridge2.0-dev:arm64 libdrm2:arm64 libxss1:arm64 libgconf-2-4:arm64 libxrandr2:arm64 libasound2-dev:arm64 libpangocairo-1.0-0:arm64 libatk1.0-dev:arm64 libcairo-gobject2:arm64 libgtk-3-dev:arm64 libgdk-pixbuf2.0-dev:arm64
          else
            # x64 dependencies
            sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxss1 libgconf-2-4 libxrandr2 libasound2-dev libpangocairo-1.0-0 libatk1.0-dev libcairo-gobject2 libgtk-3-dev libgdk-pixbuf2.0-dev
          fi

      - name: Build Electron app
        run: npm run make -- --arch=${{ matrix.arch }}
        env:
          # Code signing configuration
          # CSC_LINK: ${{ (matrix.platform == 'win32' || matrix.platform == 'darwin') && 'certificate.p12' || '' }}
          # CSC_KEY_PASSWORD: ${{ matrix.platform == 'win32' && secrets.WINDOWS_CERT_PASSWORD || (matrix.platform == 'darwin' && secrets.MACOS_CERT_PASSWORD || '') }}
          
          # macOS notarization
          # APPLE_ID: ${{ matrix.platform == 'darwin' && secrets.APPLE_ID || '' }}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{ matrix.platform == 'darwin' && secrets.APPLE_APP_SPECIFIC_PASSWORD || '' }}
          # APPLE_TEAM_ID: ${{ matrix.platform == 'darwin' && secrets.APPLE_TEAM_ID || '' }}
          
          # Target architecture
          npm_config_target_arch: ${{ matrix.arch }}
          npm_config_target_platform: ${{ matrix.platform }}
          npm_config_cache: /tmp/.npm
          npm_config_build_from_source: true

      - name: List build outputs
        run: |
          echo "Build outputs:"
          find out -type f -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.zip" | head -20

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            out/**/*.exe
            out/**/*.dmg
            out/**/*.deb
            out/**/*.rpm
            out/**/*.AppImage
            out/**/*.zip
          retention-days: 7

      - name: Clean up certificates
        if: always()
        run: |
          rm -f certificate.p12
        shell: bash

  create-release:
    needs: build
    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f | head -20

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \[${{ steps.version.outputs.version }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          else
            echo "## What's Changed" > release_notes.md
            echo "* Bug fixes and improvements" >> release_notes.md
          fi
          
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ steps.version.outputs.version }}" >> release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'rc') }}

      - name: Upload Release Assets
        run: |
          # Function to upload file
          upload_file() {
            local file="$1"
            local name="$2"
            echo "Uploading $name..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$name"
          }
          
          # Upload Windows x64 artifacts
          for file in artifacts/win32-x64-build/out/make/**/*.exe; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-windows-x64.exe"
              break
            fi
          done
          
          # Upload Windows ARM64 artifacts
          for file in artifacts/win32-arm64-build/out/make/**/*.exe; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-windows-arm64.exe"
              break
            fi
          done
          
          # Upload macOS x64 artifacts
          for file in artifacts/darwin-x64-build/out/make/**/*.dmg; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-macos-x64.dmg"
              break
            fi
          done
          
          # Upload macOS ARM64 artifacts
          for file in artifacts/darwin-arm64-build/out/make/**/*.dmg; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-macos-arm64.dmg"
              break
            fi
          done
          
          # Upload Linux x64 artifacts
          for file in artifacts/linux-x64-build/out/make/**/*.deb; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-linux-x64.deb"
              break
            fi
          done
          
          for file in artifacts/linux-x64-build/out/make/**/*.rpm; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-linux-x64.rpm"
              break
            fi
          done
          
          for file in artifacts/linux-x64-build/out/make/**/*.AppImage; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-linux-x64.AppImage"
              break
            fi
          done
          
          # Upload Linux ARM64 artifacts
          for file in artifacts/linux-arm64-build/out/make/**/*.deb; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-linux-arm64.deb"
              break
            fi
          done
          
          for file in artifacts/linux-arm64-build/out/make/**/*.rpm; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-linux-arm64.rpm"
              break
            fi
          done
          
          for file in artifacts/linux-arm64-build/out/make/**/*.AppImage; do
            if [ -f "$file" ]; then
              upload_file "$file" "${APP_NAME}-${{ steps.version.outputs.version }}-linux-arm64.AppImage"
              break
            fi
          done

  notify:
    needs: [build, create-release]
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Notify on success
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ Release created successfully!"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/latest"

      - name: Notify on failure
        if: needs.build.result == 'failure' || needs.create-release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          echo "Check the workflow logs for details."